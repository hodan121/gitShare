from random import random, randint


class Person:
    def __init__(self, race, damage, health, armor):
        self.race = race
        self.damage = damage
        self.health = health
        self.armor = armor

    def get_atr(self):
        print(
            f'У нас тут {self.race}, {self.health} ХП, тычка на {self.damage} с руки, армор поглощает {round(0.1 * self.armor * 100)}% урона')

    def _i_deal_damage(self):
        return self.damage

    def _i_get_damage(self, enemy):
        self.health -= enemy._i_deal_damage() * (1 - 0.1 * self.armor)

    def i_attack(self, enemy):
        self._i_deal_damage()
        enemy._i_get_damage(self)

    def initiative(self):
        return random()


class Player(Person):
    def __init__(self, damage=randint(110, 120), health=randint(300, 330), armor=randint(1, 3)):
        self.race = 'Человек'
        super().__init__(self.race, damage, health, armor)


class Enemy(Person):
    def __init__(self, damage=randint(120, 130), health=randint(280, 310), armor=randint(1, 3)):
        self.race = 'Андед'
        super().__init__(self.race, damage, health, armor)


class Game:
    def __init__(self):
        if Enemy().initiative() > Player().initiative():
            self.attacker = Enemy()
            self.defer = Player()
        else:
            self.attacker = Player()
            self.defer = Enemy()

    def gaming(self):
        while True:
            self.attacker.i_attack(self.defer)
            if self.defer.health <= 0:
                print(f'{self.attacker.race} выжил! У него осталось {round(self.attacker.health)} ХП')
                break
            else:
                self.attacker, self.defer = self.defer, self.attacker


human = Player()
undead = Enemy()

human.get_atr()
undead.get_atr()

game = Game()
game.gaming()
